package org.cp;

import java.util.ArrayList;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {
    public static void main(String[] args) {

        Dfs2DArray d = new Dfs2DArray();

       // int[][] grid = {{0,2,1,0},{4,0,0,3},{1,0,0,4},{0,3,2,0}};

       // int[][] grid = {{1,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,1}};

        int[][] grid = {{3,10,5,8}};

        //System.out.println(d.findMaxFish(grid));

        //String s = "MCMXCIV";
        //romanToInteger r = new romanToInteger();

        //System.out.println(r.romanToInt(s));

//        Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3

//        mergeSort ms = new mergeSort();
//
//        int[] nums1 = {1,2,3,0,0,0};
//        int[] nums2 = {2,5,6};
//        int m1 = 3;
//        int n1 = 3;
//
//        ms.merge(nums1,3,nums2,n1);

        specialArray s = new specialArray();

        //int[] nums1 = {2,1,4};
       // int[] nums1 = {2};
        //System.out.println(s.isArraySpecial(nums1));
//        String s1 = "16";
//        validString v = new validString();
//
//        System.out.println(v.findValidPair(s1));

//        String s2 ="aaaaabbc";
//        String s3 ="abcabcab";
//        String s4 ="tzt";
//
//
//        diffMaxFreq df = new diffMaxFreq();
//        System.out.println(df.maxDifference(s2));
//        System.out.println(df.maxDifference(s3));
//        System.out.println(df.maxDifference(s4));



        //nums = [1,4,3,3,2]
//        int[] nums = {1,4,3,3,2};
//        int[] nums1 = {3,3,3,3};
//        subarray s2 = new subarray();
//
//        System.out.println(s2.longestMonotonicSubarray(nums));
//        System.out.println(s2.longestMonotonicSubarray(nums1));
//        numberFormat n = new numberFormat();
//        n.test();

//        int k;
//        k = 'a'^'b';
//
//        String s1 = "aa";
//        String s2 = "bb";
//        almostEqual e = new almostEqual();
//
//        System.out.println(e.areAlmostEqual(s1,s2));
//        //System.out.println("k : "+k);

//         int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
//         int target = 15;

//        int arr[] = {1, 2, 3, 7, 5};
//        int target = 12;


//          int arr[] = {2,3,4,6,8,12};
//          //int arr[] = {1,2,4,5,10};
//          tupleSame ts = new tupleSame();
//          //ts.tupleSameProduct(arr);
//          System.out.println(ts.tupleSameProduct(arr));

//         int target = 174;
//         maxSumSubArray m = new maxSumSubArray();
//         ArrayList<Integer> k =  m.subarraySum(arr,target);
//
//        System.out.println("\nMethod 2: Using an enhanced for loop");
//        for (int element : k) {
//            System.out.print(element + " ");
//        }

        //int limit =4;
        //int[][] queries = {{0,1},{1,2},{2,2},{3,4},{4,5}};
//        int limit =4;
//        int[][] queries = {{1,4},{2,5},{1,3},{3,4}};
//        distinctColors d1 = new distinctColors();
//        int[] a = d1.queryResults(limit,queries);
//
//
//        for(int p:a)
//        {
//            System.out.println(p);
//        }
//
//        int[][] queries = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};
//        Array2DSorting a1 = new Array2DSorting();
//        a1.printMatrix(queries);

//        clearDigits_problem c1 =  new clearDigits_problem();
//        //String inp = "121b34degh12";
//        String inp = "cb34";
//        c1.clearDigits(inp);
//
//        char a = '0';
//        char b = 'a';
//        System.out.println(c1.clearDigits(inp));

        //String inp = "abcabcbb";
        //String inp = "bbbbb";
//        //String inp = "pwwkew";
//        String inp = "";
//
//        longestSubstringWORepeating ls = new longestSubstringWORepeating();
//        System.out.println(ls.lengthOfLongestSubstring(inp));

        //String s1 = "daabcbaabcbc";
        //String part = "abc";

//        String s1 = "axxxxyyyyb";
//        String part = "xy";
//
//        removeOccurrencesClass rO = new removeOccurrencesClass();
//
//        System.out.println(rO.removeOccurrences(s1,part));

          maximumSumClass ms = new maximumSumClass();
          //System.out.println(ms.sumOfDigits(99999));
          //int[] nums1 = {18,43,36,13,7};
//          int[] nums1 = {229,398,269,317,420,464,491,218,439,153,482,169,411,93,147,50,347,210,251,366,401};
//          //ms.maximumSum(nums1);
//        System.out.println(ms.maximumSum(nums1));

        //int[] nums1 = {2,11,10,1,3};
        int[] nums1 = {838143973,477351988,121052388,770379303,105782152,708118500,882588219,230253017,560587152,397812337,643659612,601669668,771566414,962841450,810570350,544112871,799440717,329394454,787479395,205804609,629495304,899596311,144367425,304673518,393268041,202097336,819086349,884429174,270160705,527867855,521668021,343471570,537647818,866769125,217349099,935243686,321440158,32216125,43831964,812794341,860502677,338072008,260037766,470798181,678378133,290630090,584827892,519305975,117091652,966531836,777810877,863527565,744838858,612993326,884537124,611989640,186971728,812479399,27920770,69659259,646195084,567861321,312323780,513124936,630784171,293419536,627356157,588890365,792166297,373660002,752459117,121752076,512645203,427751912,923398172,958763879,642285281,732147783,342580005,802416393,859828446,396259566,745686562,907101150,124786437,254985881,458012611,454198810,865645378,72261777,3339254,894916237,827283202,185860947,564513716,451469180,481172251,940823958,662251478,369330609,476476247,115917861,596510797,429902540,751654265,627684499,941241480,610628209,433854410,514496162,657924257,838984533,553776785,225969380,669327335,639117071,612930507,591150850,411172174,800316506,266336676,767664376,31254906,173329275,358726123,592825304,448546934,275720101,30177210,769620767,864479734,283392822,879300242,235940235,608769270,982551119,620390032,582868324,14726321,360687612,71303863,504605842,871650043,613716893,484420553,141824191,564320933,200843471,345143910,535528375,267523645,346943613,842114257,424148479,893589388,125658604,371186577,468562893,831874702,710509781,951038412,889177517,34969476,7258324,965577519,127797070,44378086,401755305,23958348,400015808,875767510,191622840,109157194,722760747,976248009,326421444,259429712,209384622,399451397,653090819,841042570,422223269,901817618,346948049,967683425,79306050,918269741,269903354,127828512,616646553,554927062,157947774,904549748,397615710,412432239,641949694,418992730,973228086,585479463,168954795,631981615,596526363,46510840,606856086,366953368,734974020,887130397,911144493,775559317,910089491,99582910,34681563,193682744,141156831,322744672,90181678,201205057,721831925,792039893,382505946,97407214,987028349,199214129,752246459,257213558,888624920,564378347,410320286,362365058,101132947,778678974,253085142,636069368,504019304,379246801,432210174,611006844,449351329,892064186,905177305,850690744,933831916,687731658,512209544,487402878,555033842,675881692,973050398,422728306,955637497,732640511,987275630,757433951,398806171,720556133,77777088,992220908,748859635,417131994,951133756,163816076,541375981,488789871,27211993,776158360,85819118,898740458,229098485,946283187,280964349,588613947,264325760,847644280,487825288,405984796,158495132,160961407,952396914,312818839,188181681,199694136,346946185,70795267,602596738,937018319,895057582,485169492,548487471,543134593,398756610,338576755,592745426,120404937,988235245,696426820,668038250,299187356,147609120,992646018,859576688,769732440,747833460,633298777,831355981,148330965,467701132,716439768,329923263,922457668,56110938,33937332,22573675,408232760,82562331,943942194,837201952,403812948,594795710,890139150,401895702,197714204,760971789,967043301,881605970,655338090,607640293,396474631,220865201,639775739,174723826,209687809,684865361,154906919,273499122,820899136,551835929,676391894,99576678,107983427,392033660,186094091,365613290,979951583,202582255,610361428,628935429,77838149,811220163,698936707,371851559,137982345,392674127,238254532,892561428,781571698,620059865,204626266,423089632,710968282,868867157,147156557,413334751,139163187,440144184,787385216,708541681,628140702,933745732,298163879,647754575,296861028,436163619,794508763,372672993,789079041,720056081,335237075,542310587,175885844,228222839,826353730,477771264,714927901,308060681,597607222,47056906,139355133,480382533,672841906,55052527,739481287,576366495,927222119,347538510,123365929,569239269};
        int k =999999998;
        minOperationsClass mo = new minOperationsClass();
        System.out.println(mo.minOperations(nums1,k));

    }}



